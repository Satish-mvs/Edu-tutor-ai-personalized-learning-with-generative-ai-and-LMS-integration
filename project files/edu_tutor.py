# -*- coding: utf-8 -*-
"""EDU-TUTOR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w6GNxHXhKv1zdRUzbpSZLgmKpeY7Uxgh
"""

# Install dependencies
!pip install -q gradio transformers torch

import gradio as gr
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch

# Load model and tokenizer
model_name = "ibm-granite/granite-3.3-2b-instruct"
print("Loading model, this may take a while...")
HF_TOKEN = "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"  # Your Hugging Face token

tokenizer = AutoTokenizer.from_pretrained(model_name, use_auth_token=HF_TOKEN)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16,
    device_map="auto",
    use_auth_token=HF_TOKEN
)

device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Model loaded on {device}")

# User database with progress tracking
users = {
    "alice": {"password": "1234", "role": "student", "progress": {}},
    "bob": {"password": "abcd", "role": "teacher", "progress": {}},
    "admin": {"password": "admin", "role": "admin", "progress": {}}
}

session_state = {"user": None}

def login(username, password):
    user = users.get(username)
    if user and user["password"] == password:
        session_state["user"] = {"name": username, "role": user["role"]}
        return f"Logged in as {username} ({user['role']})"
    else:
        return "Login failed"

def register(username, password, role):
    if username in users:
        return "Username already exists!"
    if role not in ["student", "teacher", "admin"]:
        return "Role must be student, teacher, or admin"
    users[username] = {"password": password, "role": role, "progress": {}}
    return f"User {username} registered successfully as {role}!"

def ai_tutor(subject, topic):
    if not session_state["user"]:
        return "Please login first."
    role = session_state["user"]["role"]
    prompt = (
        f"You are a helpful AI tutor for a {role}. Explain the following topic in {subject}:\n\n"
        f"Topic: {topic}\n\nExplanation:"
    )
    inputs = tokenizer(prompt, return_tensors="pt").to(device)
    outputs = model.generate(**inputs, max_new_tokens=300)
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)

    # Update progress
    user = session_state["user"]["name"]
    users[user]["progress"][topic] = "Learned"
    return response

def generate_quiz(subject, topic):
    if not session_state["user"]:
        return "Please login first."
    role = session_state["user"]["role"]
    prompt = (
        f"You are an AI quiz generator for a {role}. "
        f"Create 3 short quiz questions with answers about {topic} in {subject}.\n\n"
        "Format:\nQ1: ...\nA1: ...\nQ2: ...\nA2: ...\nQ3: ...\nA3: ..."
    )
    inputs = tokenizer(prompt, return_tensors="pt").to(device)
    outputs = model.generate(**inputs, max_new_tokens=300)
    quiz = tokenizer.decode(outputs[0], skip_special_tokens=True)

    # Update progress
    user = session_state["user"]["name"]
    users[user]["progress"][topic] = "Quiz generated"
    return quiz

def view_progress():
    if not session_state["user"]:
        return "Please login first."
    user = session_state["user"]["name"]
    progress = users[user]["progress"]
    if not progress:
        return "No progress yet."
    return "\n".join([f"{topic}: {status}" for topic, status in progress.items()])

with gr.Blocks() as demo:
    with gr.Tab("Register"):
        reg_username = gr.Textbox(label="Choose Username")
        reg_password = gr.Textbox(label="Choose Password", type="password")
        reg_role = gr.Dropdown(choices=["student", "teacher", "admin"], label="Role")
        reg_btn = gr.Button("Register")
        reg_status = gr.Textbox(label="Registration Status", interactive=False)
        reg_btn.click(register, inputs=[reg_username, reg_password, reg_role], outputs=reg_status)

    with gr.Tab("Login"):
        username = gr.Textbox(label="Username")
        password = gr.Textbox(label="Password", type="password")
        login_btn = gr.Button("Login")
        login_status = gr.Textbox(label="Login Status", interactive=False)
        login_btn.click(login, inputs=[username, password], outputs=login_status)

    with gr.Tab("AI Tutor"):
        subject = gr.Textbox(label="Subject (e.g., Math, Science)")
        topic = gr.Textbox(label="Topic to learn about")
        ask_btn = gr.Button("Ask Tutor")
        tutor_response = gr.Textbox(label="AI Tutor Response", interactive=False)
        ask_btn.click(fn=ai_tutor, inputs=[subject, topic], outputs=tutor_response)

    with gr.Tab("Quiz Generator"):
        subject_q = gr.Textbox(label="Subject")
        topic_q = gr.Textbox(label="Topic for quiz")
        quiz_btn = gr.Button("Generate Quiz")
        quiz_output = gr.Textbox(label="Quiz", interactive=False)
        quiz_btn.click(fn=generate_quiz, inputs=[subject_q, topic_q], outputs=quiz_output)

    with gr.Tab("Progress Tracker"):
        progress_btn = gr.Button("View My Progress")
        progress_output = gr.Textbox(label="Progress", interactive=False)
        progress_btn.click(fn=view_progress, inputs=None, outputs=progress_output)

demo.launch(share=True)
theme = gr.themes.Soft(primary_hue="indigo", secondary_hue="rose")